{"version":3,"sources":["components/Header.js","utils/gridReducer.js","utils/unitReducer.js","utils/helpers.js","components/GridModal.js","components/Subgrid.js","components/NameList.js","components/GridContainer.js","utils/configReducer.js","utils/globalState.js","App.js","reportWebVitals.js","index.js"],"names":["Header","gridSlice","createSlice","name","initialState","selectedCells","recentlySelected","deselectMode","modalVisible","modalOffset","reducers","updateSelectedCells","state","action","payload","sorted","sort","a","b","left","length","top","shiftToRecent","updateRecentlySelected","toggleDeselectMode","toggleModal","updateModalOffset","actions","unitSlice","id","location","data","2200","value","user","inputTime","updateLocation","find","unit","updateData","Object","entries","forEach","item","replace","console","log","assign","modalColor","props","ModalFrame","styled","div","InputModal","Selector","button","GridModal","useSelector","grid","validCodes","dispatch","useDispatch","className","onClick","e","key","toUpperCase","target","textContent","match","newData","reduce","dataset","cell","unitName","timestamp","dayjs","format","revisedData","window","modalHide","setTimeout","extend","customParseFormat","GridTimestamp","StyledSubgrid","section","checks","GridItem","Subgrid","shiftStart","config","shiftEnd","units","timestamps","i","push","add","gridSelectorMouse","preventDefault","buttons","classList","contains","clearTimeout","isSelected","splice","indexOf","rect","getBoundingClientRect","innerWidth","right","offsetLeft","offsetTop","onMouseDown","onMouseOver","onMouseUp","map","time","cells","nameCode","data-unit-name","data-timestamp","NameList","Fragment","Container","GridLabel","GridContainer","configSlice","area","setShift","setArea","configureStore","reducer","configReducer","gridReducer","unitReducer","App","store","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63fae3f0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n\treturn (\n\t\t<header>\n\t\t\t<h1>Rounds</h1>\n\t\t\t<hr />\n\t\t</header>\n\t);\n}\n\nexport default Header;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const gridSlice = createSlice({\n\tname: 'grid',\n\tinitialState: {\n\t\tselectedCells: [],\n\t\trecentlySelected: [],\n\t\tdeselectMode: false,\n\t\tmodalVisible: false,\n\t\tmodalOffset: [0, 0],\n\t},\n\treducers: {\n\t\tupdateSelectedCells: (state, action) => {\n\t\t\tstate.selectedCells = action.payload;\n\t\t\tconst sorted = action.payload.sort((a, b) => b.left - a.left);\n\t\t\tif (sorted.length) state.modalOffset = [sorted[0].top, sorted[0].left];\n\t\t},\n\t\tshiftToRecent: state => {\n\t\t\tstate.recentlySelected = state.selectedCells;\n\t\t\tstate.selectedCells = [];\n\t\t},\n\t\tupdateRecentlySelected: (state, action) => {\n\t\t\tstate.recentlySelected = action.payload;\n\t\t},\n\t\ttoggleDeselectMode: (state, action) => {\n\t\t\tstate.deselectMode = action.payload;\n\t\t},\n\t\ttoggleModal: (state, action) => {\n\t\t\tstate.modalVisible = action.payload;\n\t\t},\n\t\tupdateModalOffset: (state, action) => {\n\t\t\tstate.modalOffset = action.payload;\n\t\t},\n\t},\n});\n\nexport const {\n\tupdateSelectedCells,\n\tshiftToRecent,\n\tupdateRecentlySelected,\n\ttoggleDeselectMode,\n\ttoggleModal,\n\tupdateModalOffset,\n} = gridSlice.actions;\n\nexport default gridSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const unitSlice = createSlice({\n\tname: 'units',\n\tinitialState: [\n\t\t{\n\t\t\tid: 1,\n\t\t\tname: 'Unit 01',\n\t\t\tlocation: 1,\n\t\t\tdata: {\n\t\t\t\t2200: {\n\t\t\t\t\tvalue: 'S',\n\t\t\t\t\tuser: 'gavinasay',\n\t\t\t\t\tinputTime: '',\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\tname: 'Unit 02',\n\t\t\tlocation: 2,\n\t\t\tdata: {},\n\t\t},\n\t],\n\treducers: {\n\t\tupdateLocation: (state, action) => {\n\t\t\tstate.find(unit => unit.id === action.payload.id).location = action.payload.location;\n\t\t},\n\t\tupdateData: (state, action) => {\n\t\t\tconst newData = Object.entries(action.payload);\n\t\t\tnewData.forEach(data => {\n\t\t\t\tconst unit = state.find(item => item.name.replace(' ', '') === data[0]);\n\t\t\t\tconsole.log(unit);\n\t\t\t\tunit.data = Object.assign(unit.data, data[1]);\n\t\t\t});\n\t\t},\n\t},\n});\n\nexport const { updateLocation, updateData } = unitSlice.actions;\n\nexport default unitSlice.reducer;\n","export function modalColor(props) {\n\tswitch (props.value) {\n\t\tcase 'S':\n\t\t\treturn `lightskyblue`;\n\t\tcase 'A':\n\t\t\treturn `yellow`;\n\t\tcase 'R':\n\t\t\treturn `lightgreen`;\n\t\tcase 'SN':\n\t\tcase 'ST':\n\t\tcase 'SW':\n\t\t\treturn `rgb(0, 230, 230)`;\n\t\tcase 'NM':\n\t\t\treturn `white`;\n\t\tcase 'GT':\n\t\t\treturn `beige`;\n\t\tcase 'B':\n\t\tcase 'ES':\n\t\t\treturn `white`;\n\t\tcase 'D':\n\t\t\treturn `red`;\n\t\tcase 'M':\n\t\t\treturn `lightgray`;\n\t\tcase 'I':\n\t\t\treturn `rgb(173, 230, 61)`;\n\t\tcase 'V':\n\t\tcase 'H':\n\t\tcase 'AW':\n\t\tcase 'DT':\n\t\t\treturn 'white';\n\t\tdefault:\n\t\t\treturn 'white';\n\t}\n}\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateData } from '../utils/unitReducer';\nimport { updateSelectedCells, shiftToRecent, updateRecentlySelected, toggleModal } from '../utils/gridReducer';\n\nimport dayjs from 'dayjs';\n\nimport { modalColor } from '../utils/helpers';\n\nconst ModalFrame = styled.div`\n\tdisplay: ${props => (props.modalVisible ? 'block' : 'none')};\n\twidth: max-content;\n\tposition: absolute;\n\tbox-sizing: border-box;\n\t${({ modalVisible, modalOffset }) =>\n\t\tmodalVisible &&\n\t\t`top: ${modalOffset[0]}px;\n\t\tleft: ${modalOffset[1]}px;`}\n\n\t.close {\n\t\ttext-align: center;\n\t\tfont-size: 1.2rem;\n\t\tbackground-color: #777777;\n\t\tborder-radius: 10px 10px 0 0;\n\t\tcolor: white;\n\t\tpadding: 10px 10px 0 10px;\n\t\twidth: min-content;\n\t\theight: min-content;\n\t\tborder: 0;\n\t\tcursor: pointer;\n\t}\n`;\n\nconst InputModal = styled.div`\n\tbackground-color: #777777;\n\tborder-radius: 0 10px 10px 10px;\n\tcolor: white;\n\tpadding: 15px;\n\n\t.modal-body {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 35px 35px;\n\t\tgrid-auto-rows: 35px;\n\t}\n`;\n\nconst Selector = styled.button`\n\tfont-size: 16px;\n\tfont-weight: bold;\n\tbackground-color: #282828;\n\tborder: 0.5px solid black;\n\theight: 100%;\n\twidth: 100%;\n\ttext-align: center;\n\toutline: none;\n\tbox-sizing: border-box;\n\tcursor: pointer;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tborder-radius: 5px;\n\tcolor: ${props => modalColor(props)};\n`;\n\nfunction GridModal() {\n\tconst modalVisible = useSelector(state => state.grid.modalVisible);\n\tconst modalOffset = useSelector(state => state.grid.modalOffset);\n\tconst selectedCells = useSelector(state => state.grid.selectedCells);\n\tconst recentlySelected = useSelector(state => state.grid.recentlySelected);\n\tconst validCodes = /^[ABDHIMORSV]{1}$|^SN$|^ST$|^SW$|^NM$|^GT$|^AW$|^ES$/;\n\tconst dispatch = useDispatch();\n\n\tfunction clearModal() {\n\t\tdispatch(toggleModal(false));\n\t\tdispatch(updateSelectedCells([]));\n\t}\n\n\tlet modalHide;\n\n\tfunction gridInputHandler(e, value = e.key?.toUpperCase() || e.target.textContent) {\n\t\tif (modalHide) window.clearTimeout(modalHide);\n\t\tif (!value.match(validCodes)) return;\n\n\t\tif (selectedCells.length) {\n\t\t\tconst newData = selectedCells.reduce((dataset, cell) => {\n\t\t\t\tif (!dataset[cell.unitName]) dataset[cell.unitName] = {};\n\t\t\t\tdataset[cell.unitName][cell.timestamp] = {\n\t\t\t\t\tvalue,\n\t\t\t\t\tuser: 'gavinasay',\n\t\t\t\t\tinputTime: dayjs().format('HH:mm:ss.SSS'),\n\t\t\t\t};\n\t\t\t\treturn dataset;\n\t\t\t}, {});\n\n\t\t\tdispatch(updateData(newData));\n\t\t\tdispatch(shiftToRecent());\n\t\t} else {\n\t\t\tconst revisedData = recentlySelected.reduce((dataset, cell) => {\n\t\t\t\tif (!dataset[cell.unitName]) dataset[cell.unitName] = {};\n\t\t\t\tdataset[cell.unitName][cell.timestamp] = {\n\t\t\t\t\tvalue,\n\t\t\t\t\tuser: 'gavinasay',\n\t\t\t\t\tinputTime: dayjs().format('HH:mm:ss.SSS'),\n\t\t\t\t};\n\t\t\t\treturn dataset;\n\t\t\t}, {});\n\n\t\t\tdispatch(updateData(revisedData));\n\t\t}\n\n\t\twindow.modalHide = setTimeout(() => {\n\t\t\tdispatch(updateRecentlySelected([]));\n\t\t\tdispatch(toggleModal(false));\n\t\t}, 5000);\n\t}\n\n\t// useEffect(() => {\n\t// \twindow.clearTimeout(modalHide);\n\t// }, [modalOffset, modalVisible, modalHide]);\n\n\treturn (\n\t\t<ModalFrame modalVisible={modalVisible} modalOffset={modalOffset}>\n\t\t\t<button className='close' onClick={clearModal}>\n\t\t\t\tX\n\t\t\t</button>\n\t\t\t<InputModal modalVisible={modalVisible} modalOffset={modalOffset}>\n\t\t\t\t<div className='modal-info'></div>\n\t\t\t\t<div className='modal-body' onClick={gridInputHandler}>\n\t\t\t\t\t<Selector value='S'>S</Selector>\n\t\t\t\t\t<Selector value='A'>A</Selector>\n\t\t\t\t\t<Selector value='R'>R</Selector>\n\t\t\t\t\t<Selector value='B'>B</Selector>\n\t\t\t\t\t<Selector value='SN'>SN</Selector>\n\t\t\t\t\t<Selector value='ST'>ST</Selector>\n\t\t\t\t\t<Selector value='GT'>GT</Selector>\n\t\t\t\t\t<Selector value='NM'>NM</Selector>\n\t\t\t\t\t<Selector value='SW'>SW</Selector>\n\t\t\t\t\t<Selector value='D'>D</Selector>\n\t\t\t\t\t<Selector value='M'>M</Selector>\n\t\t\t\t\t<Selector value='I'>I</Selector>\n\t\t\t\t</div>\n\t\t\t</InputModal>\n\t\t</ModalFrame>\n\t);\n}\n\nexport default GridModal;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateSelectedCells, updateRecentlySelected, toggleDeselectMode, toggleModal } from '../utils/gridReducer';\n// import { updateData } from '../utils/unitReducer';\n\nimport GridModal from './GridModal';\n\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\nimport { modalColor } from '../utils/helpers';\n\ndayjs.extend(customParseFormat);\n\nconst GridTimestamp = styled.div`\n\tbackground-color: lightgray;\n\tborder: 0.5px solid black;\n\twriting-mode: vertical-lr;\n\ttext-align: center;\n\tfont-size: 1.5em;\n\theight: 100%;\n\tbox-sizing: border-box;\n`;\n\nconst StyledSubgrid = styled.section`\n\tdisplay: grid;\n\tgrid-column-start: 3;\n\tgrid-column-end: -1;\n\tgrid-row-start: 1;\n\tgrid-row-end: -1;\n\toverflow: scroll;\n\tborder: none;\n\tjustify-content: left;\n\tposition: relative;\n\t${({ checks }) => `grid-template-columns: repeat(${checks}, 35px);`}\n\tgrid-template-rows: 100px repeat(10, 35px);\n`;\n\nconst GridItem = styled.div`\n\ttext-align: center;\n\theight: 100%;\n\twidth: 100%;\n\tfont-size: 16px;\n\tfont-weight: bold;\n\tbackground-color: #282828;\n\tborder: 0.5px solid black;\n\tbox-sizing: border-box;\n\tcursor: pointer;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tborder-radius: 5px;\n\tcolor: ${props => modalColor(props)};\n\n\t&:hover {\n\t\tborder: white 2px dotted;\n\t}\n\n\t&.selected {\n\t\tborder: yellow 2px dashed;\n\t}\n\n\t&.selected:hover {\n\t\tborder: rgb(245, 199, 26) 1px dashed;\n\t}\n`;\n\nfunction Subgrid() {\n\tconst shiftStart = useSelector(state => state.config.shiftStart);\n\tconst shiftEnd = useSelector(state => state.config.shiftEnd);\n\tconst units = useSelector(state => state.units);\n\tconst modalVisible = useSelector(state => state.modalVisible);\n\tconst deselectMode = useSelector(state => state.grid.deselectMode);\n\tconst selectedCells = useSelector(state => state.grid.selectedCells);\n\tconst recentlySelected = useSelector(state => state.grid.recentlySelected);\n\tconst dispatch = useDispatch();\n\n\tlet timestamps = [];\n\n\tlet i = 0;\n\twhile (true) {\n\t\ttimestamps.push(\n\t\t\tdayjs(shiftStart, 'HHmm')\n\t\t\t\t.add(15 * i, 'minute')\n\t\t\t\t.format('HHmm')\n\t\t);\n\t\tif (timestamps[timestamps.length - 1] === shiftEnd) break;\n\t\ti++;\n\t}\n\n\tfunction gridSelectorMouse(e) {\n\t\te.preventDefault();\n\t\tif (e.buttons !== 1 || !e.target.classList.contains('grid-item')) return;\n\t\tif (recentlySelected.length) {\n\t\t\twindow.clearTimeout(window.modalHide);\n\t\t\tdispatch(updateRecentlySelected([]));\n\t\t}\n\n\t\tconst { unitName, timestamp } = e.target.dataset;\n\t\tconst isSelected = selectedCells.find(cell => cell.unitName === unitName && cell.timestamp === timestamp);\n\n\t\tif (isSelected && deselectMode) {\n\t\t\tdispatch(updateSelectedCells(selectedCells.splice(selectedCells.indexOf([unitName, timestamp]), 1)));\n\t\t} else if (!isSelected && !deselectMode) {\n\t\t\tconst rect = e.target.getBoundingClientRect();\n\t\t\tconst left = window.innerWidth - rect.right < 350 ? e.target.offsetLeft - 165 : e.target.offsetLeft + 65;\n\t\t\tconst top = e.target.offsetTop - 50;\n\t\t\tdispatch(updateSelectedCells([...selectedCells, { unitName, timestamp, left, top }]));\n\t\t}\n\t}\n\n\tfunction selectToggleMouse(e) {\n\t\te.preventDefault();\n\t\tif (e.target.classList.contains('selected')) dispatch(toggleDeselectMode(true));\n\t\tgridSelectorMouse(e);\n\t}\n\n\tfunction renderInputModal() {\n\t\tif (modalVisible) return;\n\t\tdispatch(toggleDeselectMode(false));\n\t\tdispatch(toggleModal(true));\n\t\tif (!selectedCells.length && !recentlySelected.length) {\n\t\t\tdispatch(toggleModal(false));\n\t\t\treturn;\n\t\t}\n\t}\n\n\treturn (\n\t\t<StyledSubgrid\n\t\t\tchecks={timestamps.length}\n\t\t\tonMouseDown={selectToggleMouse}\n\t\t\tonMouseOver={gridSelectorMouse}\n\t\t\tonMouseUp={renderInputModal}\n\t\t>\n\t\t\t{timestamps.map(time => (\n\t\t\t\t<GridTimestamp key={time}>{time}</GridTimestamp>\n\t\t\t))}\n\t\t\t<GridModal />\n\t\t\t{units.map(({ name, data }) => {\n\t\t\t\tconst cells = [];\n\t\t\t\tfor (let i = 0; i < timestamps.length; i++) {\n\t\t\t\t\tconst nameCode = name.replace(' ', '');\n\t\t\t\t\tcells.push(\n\t\t\t\t\t\t<GridItem\n\t\t\t\t\t\t\tkey={`${nameCode}-${timestamps[i]}`}\n\t\t\t\t\t\t\tclassName={`grid-item ${\n\t\t\t\t\t\t\t\t(selectedCells.find(cell => cell.unitName === nameCode && cell.timestamp === timestamps[i]) ||\n\t\t\t\t\t\t\t\t\trecentlySelected.find(cell => cell.unitName === nameCode && cell.timestamp === timestamps[i])) &&\n\t\t\t\t\t\t\t\t'selected'\n\t\t\t\t\t\t\t}`}\n\t\t\t\t\t\t\tdata-unit-name={nameCode}\n\t\t\t\t\t\t\tdata-timestamp={timestamps[i]}\n\t\t\t\t\t\t\tvalue={data?.[timestamps[i]]?.value}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{data?.[timestamps[i]]?.value}\n\t\t\t\t\t\t</GridItem>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn cells;\n\t\t\t})}\n\t\t</StyledSubgrid>\n\t);\n}\n\nexport default Subgrid;\n","import React from 'react';\n\nimport { useSelector } from 'react-redux';\n\nfunction NameList() {\n\tconst units = useSelector(state => state.units);\n\n\treturn units.map(unit => (\n\t\t<React.Fragment key={unit.name}>\n\t\t\t<div key={unit.name}>{unit.name}</div>\n\t\t\t<div key={unit.location}>{unit.location}</div>\n\t\t</React.Fragment>\n\t));\n}\n\nexport default NameList;\n","import React from 'react';\nimport Subgrid from './Subgrid';\nimport NameList from './NameList';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n\tdisplay: grid;\n\twidth: 100%;\n\tgrid-template-columns: 200px 35px 1fr;\n\tgrid-template-rows: 100px repeat(10, 35px);\n\tbackground-color: #282828;\n\toverflow: scroll;\n\n\t& > div {\n\t\tborder: 0.5px solid white;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tbox-sizing: border-box;\n\t}\n`;\n\nconst GridLabel = styled.div`\n\tborder: 0.5px solid white;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tbox-sizing: border-box;\n\tfont-size: 2.5rem;\n\t${props =>\n\t\tprops.location &&\n\t\t`writing-mode: vertical-lr;\n        font-size: 1.3em;`}\n`;\n\nfunction GridContainer() {\n\treturn (\n\t\t<Container>\n\t\t\t<GridLabel>Name</GridLabel>\n\t\t\t<GridLabel location>Location</GridLabel>\n\t\t\t<Subgrid />\n\t\t\t<NameList />\n\t\t</Container>\n\t);\n}\n\nexport default GridContainer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const configSlice = createSlice({\n\tname: 'config',\n\tinitialState: {\n\t\tshiftStart: '2200',\n\t\tshiftEnd: '0700',\n\t\tarea: null,\n\t},\n\treducers: {\n\t\tsetShift: (state, action) => {\n\t\t\tstate.shiftStart = action.payload.shiftStart || state.shiftStart;\n\t\t\tstate.shiftEnd = action.payload.shiftEnd || state.shiftEnd;\n\t\t},\n\t\tsetArea: (state, action) => {\n\t\t\tstate.area = action.payload;\n\t\t},\n\t},\n});\n\nexport const { setShift, setArea } = configSlice.actions;\n\nexport default configSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport configReducer from './configReducer';\nimport unitReducer from './unitReducer';\nimport gridReducer from './gridReducer';\n\nexport default configureStore({\n\treducer: {\n\t\tconfig: configReducer,\n\t\tgrid: gridReducer,\n\t\tunits: unitReducer,\n\t},\n});\n","import './App.css';\nimport Header from './components/Header';\nimport GridContainer from './components/GridContainer';\n\nimport { Provider } from 'react-redux';\nimport store from './utils/globalState';\n\nfunction App() {\n\treturn (\n\t\t<Provider store={store}>\n\t\t\t<Header />\n\t\t\t<main>\n\t\t\t\t<GridContainer />\n\t\t\t</main>\n\t\t</Provider>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}